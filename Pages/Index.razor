@using System.Text.Json.Serialization;
@using System.IO;
@using System.Net;
@using System.Net.Http;
@using System.Text.Json;
@using System.Threading;
@using System.Runtime.Serialization.Formatters.Binary;
@using System.Text;
@using System.Linq;
@using System.Xml;
@page "/"
@inject IJSRuntime JSRuntime2;
@inject Blazored.LocalStorage.ILocalStorageService ls;
@*<input @ref="Btn" id="Button1" type="button" value="button" />*@

<style type="text/css">
    .grid-container {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr;
        grid-template-rows: 1fr;
        gap: 0px 0px;
        grid-template-areas:
            "first first first first second second";
        /* overflow-x: scroll;hidden
        overflow-y: scroll;*/
        /*height: 100vh;*/
        /*overflow-x: no-display;*/
        /*overflow-y: no-display;*/
        /*overflow:no-display;*/
    }

    .first {
        display: grid;
        grid-template-columns: 1fr 1fr;
        grid-template-rows: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;
        gap: 1px 1px;
        grid-template-areas:
            "searchtxt searchtxt"
            "foundops foundops"
            "foundlst foundlst"
            "savefnd delsvd"
            "savedopis savedopis"
            "savedlst savedlst"
            "savesvd delpay"
            "playopis playopis"
            "playlst playlst";
        grid-area: first;
        /*overflow: auto;*/
        /*overflow-x: scroll;*/
        /*overflow-y: scroll;*/
        height: 100vh;
    }

    .searchtxt {
        grid-area: searchtxt;
    }

    .foundops {
        grid-area: foundops;
    }

    .foundlst {
        grid-area: foundlst;
    }

    .savefnd {
        grid-area: savefnd;
    }

    .delsvd {
        grid-area: delsvd;
    }

    .savedopis {
        grid-area: savedopis;
    }

    .savedlst {
        grid-area: savedlst;
    }

    .savesvd {
        grid-area: savesvd;
    }

    .delpay {
        grid-area: delpay;
    }

    .playopis {
        grid-area: playopis;
    }

    .playlst {
        grid-area: playlst;
    }

    .second {
        display: grid;
        grid-template-columns: 1fr;
        grid-template-rows: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;
        gap: 1px 1px;
        grid-template-areas:
            "find"
            "play"
            "you"
            "opis";
        grid-area: second;
        /*overflow-x: scroll;*/
        /*overflow: auto;*/
        /*overflow-y: scroll;*/
        height: 100vh;
    }

    .find {
        grid-area: find;
    }

    .play {
        grid-area: play;
    }

    .you {
        grid-area: you;
    }

    .opis {
        grid-area: opis;
    }
</style>


<div class="grid-container">
    <div class="first">

        <div class="searchtxt">
            <input id="Text1" type="text" border="5" bordercolor="#FF0099" style=" width: 100%;border: 3px solid red;" @bind="@TextFind" />
        </div>

        <div class="foundops">
            <h5 style=" width: 100%;color: black;background-color: lightpink;">Найдено:</h5>
        </div>

        <div class="foundlst">
            @*<style type="text/css">

                    /*select,*/
                    ul {
                        float: left;
                        height: 25vh; /*fit-content()5 %100px1fr*/
                        overflow: auto;
                        width: 100%; /*auto*/ /*100px*/
                        /*border: 1px solid #000;*/
                        margin: 0;
                        padding: 0;
                        overflow-x: scroll;
                    }

                    /**/
                    /*ul {
                        margin: 0;
                        padding: 0;
                        overflow-x: scroll;*/
                        /*: hidden*/
                    /*}*/

                    li {
                        float: left;
                        list-style-type: none;
                        margin: 0;
                        padding: 0;
                    }

                    label {
                        float: left;
                        display: block;
                        color: WindowText;
                        background-color: Window;
                        margin: 0;
                        padding: 0;
                        width: 100%;
                    }

                        label:hover {
                            float: left;
                            background-color: Highlight;
                            color: HighlightText;
                            /*float: left; style="float:left;"*/
                        }
                </style>*@
            @*@onchange="@((args) => {
                                  row.Selected = (bool)args.Value;
                Console.WriteLine(row.Selected.ToString());} )" @ref="Fnd"@*autocomplete="off"*@
            <ul class="lstul">
                @for (int i = 0; i < foundList.Count; i++)
                {
                    int localVar = i;/**/@*@attributes="Chec"*@
                    var yyy = "fchk" + i /*foundList[localVar]*/;@*async*@@*await*@
                    <li class="lstli">
                        <label class="lstlabel" for=@yyy>
                            <input type="checkbox" name=@yyy id=@yyy
                                   @onchange="@((args) => {
                                              foundCl[foundList[localVar]].CheckedA=(bool)args.Value;} )"
                                   @onclick="@(async () => await playOne(foundCl[foundList[localVar]].description, foundCl[foundList[localVar]].videoId))">
                            @foundList[localVar]
                        </label>
                        @*g17(@yyy);*@
                    </li>
                    <br />
                }
            </ul>
        </div>

        <div class="savefnd">
            <input id="Button12" type="button" style="color: black;background-color: lightpink;width: 100%;"
                   @onclick="Save" value="Сохранить (выделив в Найденном)" />
        </div>

        <div class="delsvd">
            <input id="Button13" type="button" style="color: black;background-color: lightblue;width: 100%;"
                   @onclick="DeleteSavd" value="Удалить (выделив в Сохранённом)" />
        </div>

        <div class="savedopis">
            <h5 style="width: 100%; color: black;background-color: lightblue;">
                Сохранённое:
            </h5>
        </div>

        <div class="savedlst">
            <ul class="lstul">
                @for (int i = 0; i < savedList.Count; i++)
                {
                    int localVar = i; var yyy = "ds" + savedList[localVar];/*"schk" + i*/
                    <li class="lstli">
                        <label class="lstlabel" for=@yyy>
                            @*disabled=@IsTaskRunning*@@*@attributes="Chec"*@
                            <input type="checkbox" name=@yyy id=@yyy
                                   @onchange="@((args) => {
                                              savedCl[savedList[localVar]].CheckedA=(bool)args.Value;} )"
                                   @onclick="@(async () => await playOne(savedCl[savedList[localVar]].description, savedCl[savedList[localVar]].videoId))">
                            @savedList[localVar]
                        </label>
                    </li>
                    <br />
                }
            </ul>
                @*<select @ref="Savd" size="10" multiple style="width: 100%;overflow: auto;border: 0;outline: 0;">

            @for (int i = 0; i < savedList.Count; i++)
            {
                int localVar = i;
                <option @onclick="@(async () => await playOne(savedCl[savedList[localVar]].description, savedCl[savedList[localVar]].videoId))">
                    @savedList[localVar]
                </option>
            }

            }
        </select>*@
</div>

        <div class="savesvd">
            <input id="Button14" type="button" style="color: black;background-color: lightblue;width: 100%;" @onclick="AddPlay" value="Добавить (выделив в Сохранённом)" />
        </div>

        <div class="delpay">
            <input id="Button15" type="button" style=" color: black;background-color: Silver;width: 100%;" @onclick="DeletePlay" value="Убрать (выделив в Списоке воспроизведения)" />
        </div>

        <div class="playopis">
            <h5 style="width: 100%; color: black;  background-color: Silver;"> Список воспроизведения:</h5>
        </div>

        <div class="playlst">
            @*unchecked*@
            <ul class="lstul">
                @for (int i = 0; i < playList.Count; i++)
                {
                    int localVar = i; var yyy = "ps" + savedList[localVar]; /*"pchk" + i*/;
                    <li class="lstli">
                        <label class="lstlabel" for=@yyy>
                            @*@attributes="Chec"*@
                                                <input type="checkbox" name=@yyy id=@yyy
                                                       @onchange="@((args) => {
                                              playCl[playList[localVar]].CheckedA=(bool)args.Value;} )"
                                                       @onclick="@(async () => await playOne(playCl[playList[localVar]].description, playCl[playList[localVar]].videoId))">
                                                @playList[localVar]
                                            </label>
                    </li>
                    <br />
                }
            </ul>
                @*<select @ref="Play" size="10" multiple style=" width: 100%;overflow: auto;border: 0;outline: 0;">

            @for (int i = 0; i < playList.Count; i++)
            {
                int localVar = i;
                <option @onclick="@(async () => await playOne(playCl[playList[localVar]].description, playCl[playList[localVar]].videoId))">
                    @playList[localVar]
                </option>
            }

            }
        </select>*@
</div>

    </div>
    <div class="second">
        <div class="find">
            <input type="button" id="Button17" style="color: black;background-color: lightpink;width:  100%;" value="Поиск" @onclick=Find />
        </div>

        <div class="play">
            <input id="Button11" type="button" style=" width: 100%;color: white;background-color: DeepPink ;" @onclick=Start value="Старт (Списка воспроизведения)" />
        </div>

        <div class="you">
            <div id="player"></div>
        </div>

        <div class="opis">
            <textarea id="TextArea1" style="width: 100%;border: none;" rows="20" name="text" @bind="@Opisanie" />
        </div>

    </div>
</div>

@code {

    public Dictionary<string, object> Chec { get; set; } =
        new Dictionary<string, object>()
        {
            {"checked", "checked" }
        };

    private static Action action;

    //protected override void OnInitialized()
    //{
    //    action = ()=> { TextFind = "8889"; };
    //}

    //static string  bvc = "eee11";

    [/*JSInvokable*/JSInvokable/*Attribute*/("MyBlazorInstallMethod")]/* */
    public /*async*/static/**/ /**/void /*Task*/ /*Task<string>*//*[]*/ MyBlazorInstallMethod()
    {
        //bvc = "eee22";return;

        action.Invoke();
        //return Task.FromResult(new int[] { 1, 2, 3 });
        /*this.*/
        //return Task.FromResult("88"); //"555666";
        //// show an alert and get the result
        ////...
        //// tell browser to install
        //if (2 > 1  /*UserChoseInstall*/)
        //{
        //await JSRuntime2.InvokeVoidAsync("BlazorPWA.installPWA");

        //}
    }

    volatile bool bob;
    //volatile
    //protected override async Task OnAfterRender(bool firstRender)
    protected override /*void*/async Task OnAfterRenderAsync(bool firstRender)
    {
        //_syncEvent2.Reset();

        try
        {
            await base.OnAfterRenderAsync(firstRender);

            //action = () => { TextFind = "8889"; };

            if (firstRender)//1 > 5
            {
                var Result5 = await JSRuntime2.InvokeAsync<string>("loadClient",
/*TimeSpan.FromSeconds(3),*/ GrinFc.Decrypt("b56mGFd6qA4itLpSAHafbrpslTS+ueSKBmC3vwLmRh4dA70L3So667jT7ToCv0io", GrinFc.GenerateAPassKey("Pass$#2++ss1.Ge4Key!1238")));

                var jsInProcess = (IJSInProcessRuntime)JSRuntime2;

                if (!await ls.ContainKeyAsync("lastPlay"))
                {

                    //var value = jsInProcess.Invoke<string>("javascriptFunctionIdentifier");
                    Result5 = jsInProcess.Invoke<string>("mkYouTubeIframeAPIReady");
                    //await JSRuntime2.InvokeVoidAsync("mkYouTubeIframeAPIReady");
                }
                else
                {
                    Result5 = jsInProcess.Invoke<string>("mkYouTubeIframeAPIReadyLast", await ls.GetItemAsync<string>("lastPlay"));
                    //await JSRuntime2.InvokeVoidAsync("mkYouTubeIframeAPIReadyLast", await ls.GetItemAsync<string>("lastPlay"));
                }

                #region MyRegion
                //synEvent.Set();
                //var  Result2 = /*"rrrr";//*/ await JSRuntime2.InvokeAsync<string>("ReadCookie.ReadCookie", "FindBlzWpa");
                //Result = string.IsNullOrWhiteSpace(Result2) ? (i5++).ToString() : Result2;

                //if (!await ls.ContainKeyAsync("custId")) { /*_syncEvent2.Set();*/ return; }
                ///*var Result2*/
                //forecasts = await ls.GetItemAsync<List<string>>("custId");
                //ggg = await ls.GetItemAsync<hj>("custId");

                /*"rrrr";//*/ //await JSRuntime2.InvokeAsync<string>("ReadCookie.ReadCookie", "FindBlzWpa");
                              //Result = string.Join("<rkt>", Result2);
                              //_syncEvent2.Set();
                              //await JSRuntime2.InvokeVoidAsync("installinged");

                #endregion

                bob = true;
            }


        }
        catch (Exception e)
        {

            Opisanie = "Exception 00 " + e.Message;
        }
    }

    string Opisanie { get; set; }
    string TextFind { get; set; }

    #region MyRegion
    //string opisanie;

    //string Opisanie
    //{
    //    get => opisanie; set { opisanie = value; }
    //}

    //string textFind;

    //string TextFind
    //{
    //    get => textFind; set { textFind = value; }
    //}

    //private ManualResetEvent synEvent;
    #endregion

    private List<string> foundList, savedList, playList;
    Dictionary<string, Hj> foundCl, savedCl, playCl;

    protected override async Task OnInitializedAsync()
    {
        if (true)
        {
            try
            {
                bob = false;

                //synEvent = new ManualResetEvent(false);
                //synEvent.Reset();

                foundList = new List<string>();
                savedList = new List<string>();
                playList = new List<string>();

                foundCl = new Dictionary<string, Hj>();
                savedCl = new Dictionary<string, Hj>();
                playCl = new Dictionary<string, Hj>();

                TextFind = "???";

                //await ls.ClearAsync(); await base.OnInitializedAsync(); return;

                BinaryFormatter formatter = new BinaryFormatter();

                if (await ls.ContainKeyAsync("found"))
                {
                    var Result2 = Convert.FromBase64String(await ls.GetItemAsStringAsync("found"));

                    using (MemoryStream stream = new MemoryStream(Result2))
                    {
                        foundCl = formatter.Deserialize(stream) as Dictionary<string, Hj>;
                    }

                    foundList = foundCl.Keys.ToList<string>();

                }
                if (await ls.ContainKeyAsync("saved"))
                {

                    var Result2 = Convert.FromBase64String(await ls.GetItemAsStringAsync("saved"));


                    using (MemoryStream stream = new MemoryStream(Result2))
                    {
                        savedCl = formatter.Deserialize(stream) as Dictionary<string, Hj>;
                    }

                    savedList = savedCl.Keys.ToList<string>();

                }
                if (await ls.ContainKeyAsync("play"))
                {

                    var Result2 = Convert.FromBase64String(await ls.GetItemAsStringAsync("play"));


                    using (MemoryStream stream = new MemoryStream(Result2))
                    {
                        playCl = formatter.Deserialize(stream) as Dictionary<string, Hj>;
                    }

                    playList = playCl.Keys.ToList<string>();

                }

                //foundList = new List<string>() { "100011", "800011" }; return;

                #region MyRegion
                //var jsInProcess = (IJSInProcessRuntime)JSRuntime2;

                // Result5 = jsInProcess.Invoke<string>("authenticate");
                //var Result5 = jsInProcess.Invoke<string>("loadClient", GrinFc.Decrypt("b56mGFd6qA4itLpSAHafbrpslTS+ueSKBmC3vwLmRh4dA70L3So667jT7ToCv0io", GrinFc.GenerateAPassKey("Pass$#2++ss1.Ge4Key!1238")));

                //                        var Result5 = await JSRuntime2.InvokeAsync<string>("loadClient",
                ///*TimeSpan.FromSeconds(3),*/ GrinFc.Decrypt("b56mGFd6qA4itLpSAHafbrpslTS+ueSKBmC3vwLmRh4dA70L3So667jT7ToCv0io", GrinFc.GenerateAPassKey("Pass$#2++ss1.Ge4Key!1238")));


                //                        if (!await ls.ContainKeyAsync("lastPlay"))
                //                        {

                //                            //var value = jsInProcess.Invoke<string>("javascriptFunctionIdentifier");
                //                            Result5 = jsInProcess.Invoke<string>("mkYouTubeIframeAPIReady");
                //                            //await JSRuntime2.InvokeVoidAsync("mkYouTubeIframeAPIReady");
                //                        }
                //                        else
                //                        {
                //                            Result5 = jsInProcess.Invoke<string>("mkYouTubeIframeAPIReadyLast", await ls.GetItemAsync<string>("lastPlay"));
                //                            //await JSRuntime2.InvokeVoidAsync("mkYouTubeIframeAPIReadyLast", await ls.GetItemAsync<string>("lastPlay"));
                //                        }

                //                        synEvent.Set();
                #endregion

                await base.OnInitializedAsync();


            }
            catch (Exception e)
            {
                //synEvent.Set();
                Opisanie = "Exception 1 " + e.Message;
            }
        }
    }

    private async Task Find()
    {
        try
        {
            //var ggh12 = synEvent.WaitOne();
            if (!bob) { /*Opisanie = "ups1";*/ return; }
            else
            {
                #region MyRegion
                //Opisanie = "ups2";

                //foundList = new List<string>() {
                //            "1100001", "88000014",
                //        "1100002", "88000024",
                //        "1100003", "88000034",
                //        "1100004", "88000044",
                //        "1100005", "88000054",
                //        "1100006", "88000064",
                //        };

                //foreach(var v in foundList)
                //{
                //    foundCl.Add(v,new Hj() { videoId = v+"q", description = v+"r" });
                //}
                ////foundCl.Add(ddd[ie + 3] + "<-rkt->" + ddd[ie + 1],
                ////new Hj() { videoId = ddd[ie + 1], description = ddd[ie + 4] });

                //return;
                //var yujk= await Task.FromResult<string>("rre4");// .rezult

                //Opisanie = yujk;
                //return;
                #endregion

                if (TextFind.Replace(" ", "").Length < 2) { Opisanie = "ups2"; return; }

                foundList.Clear();
                foundCl.Clear();

                var Resultt = await JSRuntime2.InvokeAsync<string>("execute2", TextFind);

                //Opisanie = Resultt;
                //return;

                //foundList = new List<string>() { "110", "880" };return;

                if (5 > 1)
                {
                    string[] ddd = Resultt.Replace("  ", " ").Split(
                   new string[] {
                                        @""",""id"":{""kind"":""youtube#video"",""videoId"":""" ,
                                        @"""},""snippet"":{""publishedAt"":""",
                                    @""",""title"":""",
                                    @""",""description"":""",
                                    @""",""thumbnails"":{""default"":"}
            , StringSplitOptions.None);

                    for (int ie = 0; ie < ddd.Length; ie = ie + 5)
                    {
                        foundCl.Add(ddd[ie + 3] + "<-rkt->" + ddd[ie + 1],
                    new Hj() { videoId = ddd[ie + 1], description = ddd[ie + 4] });
                        if (ie + 5 + 5 > ddd.Length) { break; }
                    }

                    ////------------
                    //foundList = new List<string>() { "11", "88" }; //foundCl.Keys.ToList<string>();
                    //return;
                    ////------------

                    string[] llistt3 = foundCl.Values.Select(x => x.videoId).ToArray();

                    var Resultt33 = await JSRuntime2.InvokeAsync<string>("execute33", llistt3.ToList<string>());

                    string[] ddd2 = Resultt33.Split(
           new string[] {
                                        @""",""id"":""" ,
                                        @""",""contentDetails"":{""duration"":""",
                                        @""",""dimension"":"""}
    , StringSplitOptions.None);

                    Dictionary<string, string> Cl = new Dictionary<string, string>();

                    for (int ir = 0; ir < ddd2.Length; ir = ir + 3)
                    {
                        Cl.Add(ddd2[ir + 1], Math.Round(XmlConvert.ToTimeSpan(ddd2[ir + 2]).TotalMinutes).ToString());

                        if (ir + 3 + 3 > ddd2.Length) { break; }
                    }

                    var foundCl2 = new Dictionary<string, Hj>();

                    foreach (var item in foundCl.Keys)
                    {
                        foundCl2.Add(
                        Cl[foundCl[item].videoId] + " " + item,
                        foundCl[item]);
                    }

                    foundCl = foundCl2;

                    BinaryFormatter formatter = new BinaryFormatter();

                    string res;

                    using (MemoryStream stream1 = new MemoryStream())
                    {
                        formatter.Serialize(stream1, foundCl);

                        res = Convert.ToBase64String(stream1.GetBuffer(), 0, (int)stream1.Length);
                    }

                    await ls.SetItemAsync<string>("found", res);

                    foundList = foundCl.Keys.ToList<string>();

                }
            }
        }
        catch (Exception e)
        {
            Opisanie = "Exception 2 " + e.Message;
        }

    }

    //ElementReference Savd, Fnd, Play/*, Btn*/;

    private async Task Save()
    {
        try
        {
            //svd = await JSRuntime2.InvokeAsync<List<string>>("getSelectedValues", Fnd);
            //var dss = playCl.Values.Select(x => x.videoId).ToList<string>();
            /*List<string>*/
            var svd = (from s in foundCl/*.Values*/
                       where s.Value.CheckedA == true
                       select s.Key).ToList<string>();//ToDictionary<string, Hj>();
                                                      //foundCl.Values.Select(x => x.videoId).ToList<string>();

            foreach (var v in svd)
            {
                if (!savedCl.Keys.Contains(v)) { savedCl.Add(v, foundCl[v].Get()); }
            }

            BinaryFormatter formatter = new BinaryFormatter();

            string res;

            using (MemoryStream stream1 = new MemoryStream())
            {
                formatter.Serialize(stream1, savedCl);

                res = Convert.ToBase64String(stream1.GetBuffer(), 0, (int)stream1.Length);
            }

            await ls.SetItemAsync<string>("saved", res);

            svd = savedCl.Keys.ToList<string>();

            foreach (var v in svd)
            {
                if (!savedList.Contains(v)) { savedList.Add(v); }
            }
        }
        catch (Exception ex)
        {

            #region MyRegion
            //StringBuilder sd = new StringBuilder();
            //foreach (var v in foundCl.Keys)
            //{
            //    sd.AppendLine(v);
            //}
            //sd.AppendLine("java");
            //foreach (var v in svd)
            //{
            //    sd.AppendLine(v);
            //}
            //sd.AppendLine("ex.Message").AppendLine(ex.Message);
            /*sd*/
            #endregion

            Opisanie = "Exception 3 " + ex.ToString();
        }
    }

    //private ElementReference button1;
    //bool IsTaskRunning=false;

    private async Task DeleteSavd()
    {
        //List<string> del = await JSRuntime2.InvokeAsync<List<string>>("getSelectedValues", Savd);
        //List<string> del = (from s in savedCl.Values
        //                    where s.CheckedA == true
        //                    select s.videoId).ToList<string>();
        var del = (from s in savedCl/*.Values*/
                   where s.Value.CheckedA == true
                   select s.Key).ToList<string>();

        foreach (var v in del)
        {
            if (savedCl.Keys.Contains(v))
            {
                //savedCl
                savedCl.Remove(v);
            }
        }

        BinaryFormatter formatter = new BinaryFormatter();

        string res;
        using (MemoryStream stream1 = new MemoryStream())
        {
            formatter.Serialize(stream1, savedCl);

            res = Convert.ToBase64String(stream1.GetBuffer(), 0, (int)stream1.Length);
        }

        await ls.SetItemAsync<string>("saved", res);

        await JSRuntime2.InvokeVoidAsync("chacds", savedList);

        savedList.RemoveAll(vehicle => del.Contains(vehicle) == true);//




        //var lio = savedList.ToList<string>();
        //savedList.Clear();
        //savedList = new List<string>() { "ref" };
        ////savedList = null; 
        //savedList = lio;
        //lio.RemoveAll(vehicle => del.Contains(vehicle) == true);
        //savedList = lio;
        ////IsTaskRunning = true; /*button1.*/ //
        ////IsTaskRunning = false;                                    ////

        //ShouldRender();
        //StateHasChanged();
        //await OnInitializedAsync();
        //await OnAfterRenderAsync(false);

        //base.BuildRenderTree();
        //this.

        // Update the UI
        //InvokeAsync(() =>
        //{
        //    StateHasChanged();
        //});

        //InvokeAsync(() =>
        //{
        //    ShouldRender();
        //});
        //StateHasChanged(); ShouldRender();
    }

    private async Task AddPlay()
    {
        //var ply = await JSRuntime2.InvokeAsync<List<string>>("getSelectedValues", Savd);

        //List<string> ply = (from s in savedCl.Values
        //                    where s.CheckedA == true
        //                    select s.videoId).ToList<string>();

        var ply = (from s in savedCl/*.Values*/
                   where s.Value.CheckedA == true
                   select s.Key).ToList<string>();

        foreach (var v in ply)
        {
            if (!playCl.Keys.Contains(v)) { playCl.Add(v, savedCl[v].Get()); }
        }

        BinaryFormatter formatter = new BinaryFormatter();

        string res;
        using (MemoryStream stream1 = new MemoryStream())
        {
            formatter.Serialize(stream1, playCl);

            res = Convert.ToBase64String(stream1.GetBuffer(), 0, (int)stream1.Length);
        }

        await ls.SetItemAsync<string>("play", res);

        ply = playCl.Keys.ToList<string>();
        foreach (var v in ply)
        {
            if (!playList.Contains(v)) { playList.Add(v); }
        }

    }

    private async Task DeletePlay()
    {
        //List<string> del = await JSRuntime2.InvokeAsync<List<string>>("getSelectedValues", Play);

        //List<string> del = (from s in playCl.Values
        //                    where s.CheckedA == true
        //                    select s.videoId).ToList<string>();

        var del = (from s in playCl/*.Values*/
                   where s.Value.CheckedA == true
                   select s.Key).ToList<string>();

        foreach (var v in del)
        {
            if (playCl.Keys.Contains(v)) { playCl.Remove(v); }
        }

        BinaryFormatter formatter = new BinaryFormatter();

        string res;
        using (MemoryStream stream1 = new MemoryStream())
        {
            formatter.Serialize(stream1, playCl);

            res = Convert.ToBase64String(stream1.GetBuffer(), 0, (int)stream1.Length);
        }

        await ls.SetItemAsync<string>("play", res);

        //var lio = playList.ToList<string>();
        //playList.Clear(); playList = null; 
        await JSRuntime2.InvokeVoidAsync("chacps", playList);
        
        playList.RemoveAll(vehicle => del.Contains(vehicle) == true);

        //playList = new List<string>() { "ref" };
        //lio.RemoveAll(vehicle => del.Contains(vehicle) == true);
        //playList = lio;
        //await base.OnAfterRenderAsync(false); //BuildRenderTree
        //base.ShouldRender();
        //base.StateHasChanged();
        //base.OnInitialized();

        //ShouldRender();
        //StateHasChanged();
        //await OnInitializedAsync();
        //await OnAfterRenderAsync(false);

        // Update the UI
        //InvokeAsync(() =>
        //{
        //    StateHasChanged();
        //});

        //InvokeAsync(() =>
        //{
        //    ShouldRender();
        //});

        //StateHasChanged(); ShouldRender();
    }

    private async Task Start()
    {
        //Opisanie = bvc;
        //overscroll-behavior-y: contain
        //bool confirmed = await JSRuntime2.InvokeAsync<bool>("confirm", "Are you sure?");
        //string prompted = await JSRuntime2.InvokeAsync<string>("prompt", "Take some input:");
        //await JSRuntime2.InvokeVoidAsync("alert", "Warning!");
        //return;
        try
        {
            if (playCl.Count == 0) { return; }

            var dss = playCl.Values.Select(x => x.videoId).ToList<string>();
            await ls.SetItemAsync<string>("lastPlay", dss[0]);

            await JSRuntime2.InvokeVoidAsync("playMany", dss);

        }
        catch (Exception ex)
        {
            //Opisanie = et.Message + "----" + playCl.Count.ToString();
            Opisanie = "Exception 4 " + ex.ToString();
        }
    }

    private async Task playOne(string a, string b/*, bool id*/)
    {
        //Opisanie = a + "<--->" + b; return;

        //if () { }

        await ls.SetItemAsync<string>("lastPlay", b);

        Opisanie = a;
        await JSRuntime2.InvokeVoidAsync("playOne", b);
    }

    //private async Task playOneADD(string a, string b, bool id)
    //{
    //    //Opisanie = a + "<--->" + b; return;

    //    //if () { }

    //    //await ls.SetItemAsync<string>("lastPlay", b);

    //    Opisanie = a + "<--->" + b + "<--->" + id;
    //    //await JSRuntime2.InvokeVoidAsync("playOne", b);
    //}
    protected void HandleSomeEvent()
    {
        var jsInProcess = (IJSInProcessRuntime)JSRuntime2;
        var value = jsInProcess.Invoke<string>("javascriptFunctionIdentifier");
    }

    //protected void HandleSomeEvent2()
    //{


    //    var results =new string[5];
    //    int i=0;
    //    for (i = 0; i < Fnd.options.length; i++)
    //    {
    //        if (sel.options[i].selected)
    //        {
    //            results[results.length] = sel.options[i].value;
    //        }
    //    }

    //}
}

