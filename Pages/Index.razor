@using System.Text.Json.Serialization;
@using System.IO;
@using System.Net;
@using System.Net.Http;
@using System.Text.Json;
@using System.Threading;
@using System.Runtime.Serialization.Formatters.Binary;
@using System.Text;
@using System.Linq;
@using System.Xml;
@page "/"
@inject IJSRuntime JSRuntime2;
@inject Blazored.LocalStorage.ILocalStorageService ls;
@inject NavigationManager uriHelper;

<div class="grid-container">
    <div class="first">

        <div class="searchtxt">
            <input id="mainsearchtxt" type="search" border="5" bordercolor="#FF0099" style=" width: 100%;border: 3px solid red;" @bind="@TextFind" @ondblclick="ClearTextFind" />@*onkeydown*@ @*@onkeypress="Enter_"*@
        </div>

        <div class="foundops">

            <h5 style=" width: 100%;color: black;background-color: lightpink;" @onclick="playOne">Найдено(Нажми здесь=запусти выбранное последним):</h5>
        </div>

        <div class="foundlst">
            <ul class="lstul">
                @for (int i = 0; i < foundList.Count; i++)
                {
                    int localVar = i;
                    var yyy = "fnd" + foundList[localVar];/*localVar*/
                    <li class="lstli">
                        <label class="lstlabel" for=@yyy>
                            <input type="checkbox" name=@yyy id=@yyy
                                   @onchange="@((args) => {
                                      foundCl[foundList[localVar]].CheckedA=(bool)args.Value;} )"
                                   @onclick="@(async () => await setPlayOne(foundCl[foundList[localVar]].description, foundCl[foundList[localVar]].videoId))">
                            @foundList[localVar]
                        </label>
                    </li>
                    <br>
                    <br />
                }@**@
            </ul>
        </div>

        <div class="savefnd">
            <input id="Button12" type="button" style="color: black;background-color: lightpink;width: 100%;"
                   @onclick="Save" value="Сохранить (выделив в Найденном)" />
        </div>

        <div class="delsvd">
            <input id="Button13" type="button" style="color: black;background-color: lightblue;width: 100%;"
                   @onclick="DeleteSavd" value="Удалить (выделив в Сохранённом)" />
        </div>

        <div class="savedopis">
            <h5 style="width: 100%; color: black;background-color: lightblue;" @onclick="playOne">
                Сохранённое(Нажми здесь=запусти выбранное последним):
            </h5>
        </div>

        <div class="savedlst">
            <ul class="lstul">
                @for (int i = 0; i < savedList.Count; i++)
                {
                    int localVar = i;
                    var yyy = "svd" + savedList[localVar];
                    <li class="lstli">
                        <label class="lstlabel" for=@yyy>
                            <input type="checkbox" name=@yyy id=@yyy
                                   @onchange="@((args) => {
                                              savedCl[savedList[localVar]].CheckedA=(bool)args.Value;} )"
                                   @onclick="@(async () => await setPlayOne(savedCl[savedList[localVar]].description, savedCl[savedList[localVar]].videoId))">
                            @savedList[localVar]
                        </label>
                    </li>
                    <br>
                    <br />
                }
            </ul>
        </div>

        <div class="savesvd">
            <input id="Button14" type="button" style="color: black;background-color: lightblue;width: 100%;" @onclick="AddPlay" value="Добавить (выделив в Сохранённом)" />
        </div>

        <div class="delpay">
            <input id="Button15" type="button" style=" color: black;background-color: Silver;width: 100%;" @onclick="DeletePlay" value="Убрать (выделив в Списоке воспроизведения)" />
        </div>

        <div class="playopis">
            <h5 style="width: 100%; color: black;  background-color: Silver;" @onclick="playOne"> Список воспроизведения(Нажми здесь=запусти выбранное последним):</h5>
        </div>

        <div class="playlst">
            <ul class="lstul">
                @for (int i = 0; i < playList.Count; i++)
                {
                    int localVar = i;
                    var yyy = "play" + playList[localVar];
                    <li class="lstli">
                        <label class="lstlabel" for=@yyy>
                            <input type="checkbox" name=@yyy id=@yyy
                                   @onchange="@((args) => {
                                              playCl[playList[localVar]].CheckedA=(bool)args.Value;} )"
                                   @onclick="@(async () => await setPlayOne(playCl[playList[localVar]].description, playCl[playList[localVar]].videoId))">
                            @playList[localVar]
                        </label>
                    </li>
                    <br>
                    <br />
                }
            </ul>
        </div>

    </div>
    <div class="second">
        <div class="find">
            <input type="button" id="Button17" style="color: black;background-color: lightpink;width:  100%;" value="Поиск" @onclick="Find_" />
        </div>

        <div class="play">
            <input id="Button11" type="button" style=" width: 100%;color: white;background-color: DeepPink;" @onclick="Start" value="Старт (Списка воспроизведения)" />
        </div>

        <div class="you">
            <div id="player" style="width: 100%;"></div>
        </div>

        <div class="opis">
            <textarea id="TextArea1" style=" width: 100%; border: none; overflow: auto;"
                      rows="5" name="text" @bind="@Opisanie" />
        </div>

    </div>
</div>

@code {

    //public /*static*/ async void Enter_(/*KeyboardEventArgs e*/)
    //{
    //    //if (e.Code == "Enter" || e.Code == "NumpadEnter")
    //    //{
    //    /**/
    //    await Find_();//
    //                  //}
    //}

    private void ClearTextFind()
    {
        TextFind = "";
    }

    volatile bool errStop = false;

    string Opisanie { get; set; }
    string TextFind { get; set; }

    private List<string> foundList, savedList, playList;
    Dictionary<string, Hj> foundCl, savedCl, playCl;

    static Action SetErrStop, NavigateToBaseUri;
    static Action<string> SetErrOpis;

    [JSInvokable]
    public static void NoReloadAppSetErrOpis(string h)
    {
        SetErrOpis(h);
        SetErrStop();
    }

    [JSInvokable]
    public static void ReloadApp()
    {
        NavigateToBaseUri();
    }

    //[JSInvokable]
    //public static void JsSetErrStop()
    //{
    //    SetErrStop();
    //}

    private bool ErrCheckReload(string s)
    {
        if (s.Length != 0)
        {

            if (s.Substring(0, 7) == "!!!true")
            {
                uriHelper.NavigateTo(uriHelper.BaseUri, forceLoad: true);
            }
            else if (s.Substring(0, 7) == "!!!fals")
            {
                return false;
            }
            return true;
        }
        return true;
    }


    protected override async Task OnInitializedAsync()
    {
        //if (true)
        //{
        try
        {

            errStop = false;

            SetErrStop = () => { errStop = true; };
            NavigateToBaseUri = () =>
            {
                uriHelper.NavigateTo(uriHelper.BaseUri, forceLoad: true);
            };
            SetErrOpis = (h) => { Opisanie = h; };

            foundList = new List<string>();
            savedList = new List<string>();
            playList = new List<string>();

            foundCl = new Dictionary<string, Hj>();
            savedCl = new Dictionary<string, Hj>();
            playCl = new Dictionary<string, Hj>();

            TextFind = "текст поиска";

            prevSearch = "";
            nextPage = "";

            playAdr = "";

            BinaryFormatter formatter = new BinaryFormatter();

            try
            {
                foundCl = await Deserial("found", formatter);
                foundList = foundCl.Count == 0 ? new List<string>() : foundCl.Keys.ToList<string>();
            }
            catch (Exception e)
            {

                Opisanie = " " + Opisanie + " "+"Exception 11found: " + e.Message; return;
            }



            try
            {
                savedCl = await Deserial("saved", formatter);
                savedList = savedCl.Count == 0 ? new List<string>() : savedCl.Keys.ToList<string>();
            }
            catch (Exception e)
            {

                Opisanie = " " + Opisanie + " " + "Exception 11saved: " + e.Message; return;
            }


            try
            {
                playCl = await Deserial("play", formatter);
                playList = playCl.Count == 0 ? new List<string>() : playCl.Keys.ToList<string>();
            }
            catch (Exception e)
            {

                Opisanie = " " + Opisanie + " " + "Exception 11play: " + e.Message; return;
            }

            var resulto = await JSRuntime2.InvokeAsync<string>("loadClient",
GrinFc.Decrypt("b56mGFd6qA4itLpSAHafbrpslTS+ueSKBmC3vwLmRh4dA70L3So667jT7ToCv0io", GrinFc.GenerateAPassKey("Pass$#2++ss1.Ge4Key!1238")));


            if (!ErrCheckReload(resulto))
            {
                Opisanie = resulto; return;
            }

            if (!await ls.ContainKeyAsync("lastPlay"))
            {
                resulto = await JSRuntime2.InvokeAsync<string>("mkYouTubeIframeAPIReady");
            }
            else
            {
                resulto = await JSRuntime2.InvokeAsync<string>("mkYouTubeIframeAPIReadyLast", await ls.GetItemAsync<string>("lastPlay"));
            }

            if (!ErrCheckReload(resulto))
            {
                Opisanie = resulto; return;
            }

            await base.OnInitializedAsync();

        }
        catch (Exception e)
        {
            Opisanie = "Exception 111: " + e.Message;
        }
        //}
    }

    private async void Serializ(string s,
        Dictionary<string, Hj> dict)
    {

        if (dict == null || dict.Count == 0)
        {

            if (await ls.ContainKeyAsync(s))
            { await ls.RemoveItemAsync(s); }
            return; ;

        }

        BinaryFormatter formatter = new BinaryFormatter();

        string res;

        using (MemoryStream stream1 = new MemoryStream())
        {
            formatter.Serialize(stream1, dict);

            res = Convert.ToBase64String(stream1.GetBuffer(), 0, (int)stream1.Length);
            //if (s== "found") { Opisanie = s + "  " + res; }
        }

        await ls.SetItemAsStringAsync/*SetItemAsync<string>*/(s, res);


    }

    private async Task<Dictionary<string, Hj>> Deserial(string s, BinaryFormatter formatter)
    {
        if (await ls.ContainKeyAsync(s))
        {

            try
            {
                var vvcc = await ls.GetItemAsStringAsync(s);

                //Opisanie = s + "  "+ vvcc;
                //if (s == "found") { Opisanie = s + "  " + vvcc; }
                //vvcc = vvcc.Replace("\"", "");
                //if (s == "found") { Opisanie = s + "  " + vvcc; }
                ////Opisanie = s + "  " + vvcc;
                ////serverResponse = serverResponse.Replace("\"", "");

                ////using (MemoryStream ms = new MemoryStream(Convert.FromBase64String(serverResponse)))
                ////{
                ////    return Serializer.Deserialize<User>(ms);
                ////}

                using (MemoryStream stream = new MemoryStream(
       Convert.FromBase64String(vvcc/*await ls.GetItemAsStringAsync(s)*/)))
                {
                    //await JSRuntime2.InvokeAsync<string>("BigBigBig", s, await ls.GetItemAsStringAsync(s)/*(formatter.Deserialize(stream) is Dictionary<string, Hj>).ToString()*/);

                    return formatter.Deserialize(stream) as Dictionary<string, Hj>;
                }
            }
            catch (Exception ee3)
            {
                //await JSRuntime2.InvokeAsync<string>("BigBigBig", s, await ls.GetItemAsStringAsync(s)/*(formatter.Deserialize(stream) is Dictionary<string, Hj>).ToString()*/);

                //await JSRuntime2.InvokeAsync<string>("BigBigBig", s, ee3.Message/*(formatter.Deserialize(stream) is Dictionary<string, Hj>).ToString()*/);
                /*return*/
                await ls.RemoveItemAsync(s);
                Opisanie =s+"  "+ ee3.Message;
                return new Dictionary<string, Hj>();
            }
        }
        return new Dictionary<string, Hj>();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //try{}catch (Exception e){}

        await base.OnAfterRenderAsync(firstRender); if (firstRender) { }
    }

    string prevSearch;
    string nextPage;

    private async Task Find_()
    {
        try
        {
            if (errStop) { Opisanie = "Ошибка активации."; return; }

            if (TextFind.Replace(" ", "").Length < 2) { return; }
            if (TextFind == "???") { return; }

            if (TextFind == "ангелина") { TextFind = "ангелина ковалевская"; Opisanie = "ангелина ковалевская"; return; }

            var foundCl1 = new Dictionary<string, Hj>();
            var foundCl2 = new Dictionary<string, Hj>();

            string resulto = "";

            sbyte bv = 0;

            if (prevSearch != TextFind)
            {
                prevSearch = TextFind; nextPage = "";

                resulto = await JSRuntime2.InvokeAsync<string>("videoSearch", TextFind);
                bv = 1;
            }
            else if (prevSearch == TextFind & nextPage.Length != 0)
            {

                resulto = await JSRuntime2.InvokeAsync<string>("nextVideoS", TextFind, nextPage);
                bv = 2;
            }
            else if (prevSearch == TextFind & nextPage.Length == 0)
            {

                Opisanie = "Поиск не дал результатов. " + nextPage; return;
            }


            if (!ErrCheckReload(resulto))
            {

                Opisanie = bv.ToString() + " 1 ===>" + resulto; return;
            }


            if (resulto.Contains(@"""nextPageToken"":"""))
            {
                nextPage = resulto.Replace("  ", " ").Split(@"""nextPageToken"":""")[1]
            .Split(@""",""")[0];
                Opisanie = nextPage;
            }
            else { Opisanie = "nextPageToken 0"; nextPage = ""; }

            string[] ddd = resulto.Replace("  ", " ").Split(new string[] {
                                        @""",""id"":{""kind"":""youtube#video"",""videoId"":""" ,
                                        @"""},""snippet"":{""publishedAt"":""",
                                    @""",""title"":""",
                                    @""",""description"":""",
                                    @""",""thumbnails"":{""default"":"}, StringSplitOptions.None);


            if (ddd.Length == 1)
            {
                Opisanie = "Поиск не дал результатов. --->"
 + nextPage + "--------" +
 "--------" + TextFind +
 "--------" + prevSearch + " " + bv + "<---" + resulto; return;
            }

            for (int ie = 0; ie < ddd.Length; ie = ie + 5)
            {
                foundCl1.Add(ddd[ie + 3] + "<-rkt->" + ddd[ie + 1],
    new Hj() { videoId = ddd[ie + 1], description = ddd[ie + 4] });
                if (ie + 5 + 5 > ddd.Length) { break; }
            }


            var resulto2 = await JSRuntime2.InvokeAsync<string>("videoDetails",
                  foundCl1.Values.Select(x => x.videoId).ToArray().ToList<string>());

            if (!ErrCheckReload(resulto2))
            {
                Opisanie = bv.ToString() + " 2 ===>" + resulto2; return;
            }

            string[] d2 = resulto2.Split(new string[] {
                                        @""",""id"":""" ,
                                        @""",""contentDetails"":{""duration"":""",
                                        @""",""dimension"":"""}, StringSplitOptions.None);

            Dictionary<string, string> Cl = new Dictionary<string, string>();

            for (int ir = 0; ir < d2.Length; ir = ir + 3)
            {
                Cl.Add(d2[ir + 1], Math.Round(XmlConvert.ToTimeSpan(d2[ir + 2]).TotalMinutes).ToString());

                if (ir + 3 + 3 > d2.Length) { break; }
            }

            foreach (var item in foundCl1.Keys)
            {
                foundCl2.Add(
                Cl[foundCl1[item].videoId] + " " + item,
                foundCl1[item]);
            }

            foundCl = foundCl2;

            Serializ("found", foundCl);

            resulto = await JSRuntime2.InvokeAsync<string>("delCha", foundList, "fnd");

            if (!ErrCheckReload(resulto))
            {

                Opisanie = bv.ToString() + " 1 ===>" + resulto; return;
            }

            foundList = foundCl.Keys.ToList<string>();

        }
        catch (Exception e)
        {
            Opisanie = "Exception 2 " + e.Message;
        }

    }



    private async Task Save()
    {
        try
        {
            var svd = (from s in foundCl
                       where s.Value.CheckedA == true
                       select s.Key).ToList<string>();


            foreach (var v in svd)
            {
                foundCl[v].CheckedA = false;
                if (!savedCl.Keys.Contains(v)) { savedCl.Add(v, foundCl[v].Get()); }
            }


            var resulto = await JSRuntime2.InvokeAsync<string>("delCha", foundList, "fnd");

            if (!ErrCheckReload(resulto))
            {
                Opisanie = resulto; return;
            }

            Serializ("saved", savedCl);

            savedList = savedCl.Keys.ToList<string>();

        }
        catch (Exception ex)
        {
            Opisanie = "Exception 3 " + ex.ToString();
        }
    }

    private async Task DeleteSavd()
    {

        try
        {
            var del = (from s in savedCl
                       where s.Value.CheckedA == true
                       select s.Key).ToList<string>();

            foreach (var v in del)
            {
                if (savedCl.Keys.Contains(v))
                {
                    savedCl.Remove(v);
                }
            }


            var resulto = await JSRuntime2.InvokeAsync<string>("delCha", savedList, "svd");

            if (!ErrCheckReload(resulto))
            {
                Opisanie = resulto; return;
            }


            Serializ("saved", savedCl);

            savedList.RemoveAll(vehicle => del.Contains(vehicle) == true);
        }
        catch (Exception ex)
        {

            Opisanie = "Exception 4 " + ex.ToString();
        }

    }

    private async Task AddPlay()
    {
        try
        {
            var ply = (from s in savedCl
                       where s.Value.CheckedA == true
                       select s.Key).ToList<string>();

            foreach (var v in ply)
            {
                savedCl[v].CheckedA = false;
                if (!playCl.Keys.Contains(v)) { playCl.Add(v, savedCl[v].Get()); }

            }

            var resulto = await JSRuntime2.InvokeAsync<string>("delCha", savedList, "svd");

            if (!ErrCheckReload(resulto))
            {
                Opisanie = resulto; return;
            }

            Serializ("play", playCl);


            playList = playCl.Keys.ToList<string>();

        }
        catch (Exception ex)
        {

            Opisanie = "Exception 5 " + ex.ToString();
        }

    }

    private async Task DeletePlay()
    {

        try
        {
            var del = (from s in playCl
                       where s.Value.CheckedA == true
                       select s.Key).ToList<string>();

            foreach (var v in del)
            {
                if (playCl.Keys.Contains(v))
                {
                    playCl.Remove(v);
                }
            }

            var resulto = await JSRuntime2.InvokeAsync<string>("delCha", playList, "play");

            if (!ErrCheckReload(resulto))
            {
                Opisanie = resulto; return;
            }

            Serializ("play", playCl);

            playList.RemoveAll(vehicle => del.Contains(vehicle) == true);

        }
        catch (Exception ex)
        {

            Opisanie = "Exception 6 " + ex.ToString();
        }

    }

    private async Task Start()
    {
        try
        {
            if (playCl.Count == 0) { return; }

            var dss = playCl.Values.Select(x => x.videoId).ToList<string>();

            await ls.SetItemAsync<string>("lastPlay", dss[0]);

            var resulto = await JSRuntime2.InvokeAsync<string>("playMany", dss);

            if (!ErrCheckReload(resulto))
            {
                Opisanie = resulto; return;
            }

        }
        catch (Exception ex)
        {
            Opisanie = "Exception 7 " + ex.ToString();
        }
    }

    private async void playOne()
    {
        try
        {
            if (playAdr.Length == 0) { return; }

            await ls.SetItemAsync<string>("lastPlay", playAdr);



            var resulto = await JSRuntime2.InvokeAsync<string>("playOne", playAdr);

            if (!ErrCheckReload(resulto))
            {
                Opisanie = resulto; return;
            }
        }
        catch (Exception ex)
        {

            Opisanie = "Exception 9 " + ex.ToString();
        }
    }

    string playAdr;

    private async Task setPlayOne(string opis, string adr)
    {
        try
        {
            playAdr = adr;

            Opisanie = opis;

        }
        catch (Exception ex)
        {

            Opisanie = "Exception 8 " + ex.ToString();
        }
    }
}

