@using System.Text.Json.Serialization;
@using System.IO;
@using System.Net;
@using System.Net.Http;
@using System.Text.Json;
@using System.Threading;
@using System.Runtime.Serialization.Formatters.Binary;
@using System.Text;
@using System.Linq;
@using System.Xml;
@page "/"
@inject IJSRuntime JSRuntime2;
@inject Blazored.LocalStorage.ILocalStorageService ls;
@inject NavigationManager uriHelper;

<div class="grid-container">
    <div class="first">

        <div class="searchtxt">
            <input id="Text1" type="text" border="5" bordercolor="#FF0099" style=" width: 100%;border: 3px solid red;" @bind="@TextFind" />
        </div>

        <div class="foundops">
            <h5 style=" width: 100%;color: black;background-color: lightpink;">Найдено:</h5>
        </div>

        <div class="foundlst">
            <ul class="lstul">
                @for (int i = 0; i < foundList.Count; i++)
                {
                    int localVar = i;
                    var yyy = "fnd" + foundList[localVar];/*localVar*/
                    <li class="lstli">
                        <label class="lstlabel" for=@yyy>
                            <input type="checkbox" name=@yyy id=@yyy
                                   @onchange="@((args) => {
                                      foundCl[foundList[localVar]].CheckedA=(bool)args.Value;} )"
                                   @onclick="@(async () => await playOne(foundCl[foundList[localVar]].description, foundCl[foundList[localVar]].videoId))">
                            @foundList[localVar]
                        </label>
                    </li>
                    <br />
                }
            </ul>
        </div>

        <div class="savefnd">
            <input id="Button12" type="button" style="color: black;background-color: lightpink;width: 100%;"
                   @onclick="Save" value="Сохранить (выделив в Найденном)" />
        </div>

        <div class="delsvd">
            <input id="Button13" type="button" style="color: black;background-color: lightblue;width: 100%;"
                   @onclick="DeleteSavd" value="Удалить (выделив в Сохранённом)" />
        </div>

        <div class="savedopis">
            <h5 style="width: 100%; color: black;background-color: lightblue;">
                Сохранённое:
            </h5>
        </div>

        <div class="savedlst">
            <ul class="lstul">
                @for (int i = 0; i < savedList.Count; i++)
                {
                    int localVar = i;
                    var yyy = "svd" + savedList[localVar];
                    <li class="lstli">
                        <label class="lstlabel" for=@yyy>
                            <input type="checkbox" name=@yyy id=@yyy
                                   @onchange="@((args) => {
                                              savedCl[savedList[localVar]].CheckedA=(bool)args.Value;} )"
                                   @onclick="@(async () => await playOne(savedCl[savedList[localVar]].description, savedCl[savedList[localVar]].videoId))">
                            @savedList[localVar]
                        </label>
                    </li>
                    <br />
                }
            </ul>
        </div>

        <div class="savesvd">
            <input id="Button14" type="button" style="color: black;background-color: lightblue;width: 100%;" @onclick="AddPlay" value="Добавить (выделив в Сохранённом)" />
        </div>

        <div class="delpay">
            <input id="Button15" type="button" style=" color: black;background-color: Silver;width: 100%;" @onclick="DeletePlay" value="Убрать (выделив в Списоке воспроизведения)" />
        </div>

        <div class="playopis">
            <h5 style="width: 100%; color: black;  background-color: Silver;"> Список воспроизведения:</h5>
        </div>

        <div class="playlst">
            <ul class="lstul">
                @for (int i = 0; i < playList.Count; i++)
                {
                    int localVar = i;
                    var yyy = "play" + playList[localVar];
                    <li class="lstli">
                        <label class="lstlabel" for=@yyy>
                            <input type="checkbox" name=@yyy id=@yyy
                                   @onchange="@((args) => {
                                              playCl[playList[localVar]].CheckedA=(bool)args.Value;} )"
                                   @onclick="@(async () => await playOne(playCl[playList[localVar]].description, playCl[playList[localVar]].videoId))">
                            @playList[localVar]
                        </label>
                    </li>
                    <br />
                }
            </ul>
        </div>

    </div>
    <div class="second">
        <div class="find">
            <input type="button" id="Button17" style="color: black;background-color: lightpink;width:  100%;" value="Поиск" @onclick=Find />
        </div>

        <div class="play">
            <input id="Button11" type="button" style=" width: 100%;color: white;background-color: DeepPink;" @onclick=Start value="Старт (Списка воспроизведения)" />
        </div>

        <div class="you">
            <div id="player" style="width: 100%;"></div>
        </div>

        <div class="opis">
            <textarea id="TextArea1" style=" width: 100%; border: none; overflow: auto;"
                      rows="5" name="text" @bind="@Opisanie" />
        </div>

    </div>
</div>

@code {

    volatile bool bob = false;

    string Opisanie { get; set; }
    string TextFind { get; set; }

    private List<string> foundList, savedList, playList;
    Dictionary<string, Hj> foundCl, savedCl, playCl;

    static Action a, b;
    static Action<string> c; //

    [JSInvokable]
    public static void ReloadMkS(string h)
    {
        c(h)/*.Invoke()*/;
    }

    [JSInvokable]
    public static void ReloadMk()
    {
        b.Invoke();
    }

    [JSInvokable]
    public static void BobTrue()
    {
        a.Invoke();
    }

    private bool StopBob(string s)
    {
        if (s.Length != 0)// false
        {
            /**/
            if (s.Substring(0, 7) == "!!!true")// false
            {
                uriHelper.NavigateTo(uriHelper.BaseUri, forceLoad: true);
            }
            else if (s.Substring(0, 7) == "!!!fals")
            {

                //Opisanie = resulto;
                return false;
            }
            return true;
        }
        return true;
    }


    protected override async Task OnInitializedAsync()
    {
        //if (true)
        //{
        try
        {


            bob = false;

            a = () => { bob = true; };
            b = () =>
            {
                uriHelper.NavigateTo(uriHelper.BaseUri, forceLoad: true);
            };
            c = (h) => { Opisanie = h; };

            foundList = new List<string>();
            savedList = new List<string>();
            playList = new List<string>();

            foundCl = new Dictionary<string, Hj>();
            savedCl = new Dictionary<string, Hj>();
            playCl = new Dictionary<string, Hj>();

            TextFind = "???";

            prevSearch = "";
            nextPage = "";

            BinaryFormatter formatter = new BinaryFormatter();

            //Action< string, BinaryFormatter, Dictionary<string, Hj>, List<string>> ty
            //    = /*await*/async ( s,  forma,  dict,   lis) => {

            //        if (await ls.ContainKeyAsync(s))
            //        {

            //            using (MemoryStream stream = new MemoryStream(
            //                Convert.FromBase64String(await ls.GetItemAsStringAsync(s))))
            //            {
            //                /*return*/
            //                dict =  formatter.Deserialize(stream) as Dictionary<string, Hj>;
            //            }

            //            lis = dict.Keys.ToList<string>();

            //            //Opisanie = Opisanie + " \n " + s+ " \n " +string.Join("+", foundList) + " \n ";
            //        }

            //        ; };

            /*Deserial*/
            //Dictionary<string, Hj> dic

            //await ls.ClearAsync(); return;+-

            foundCl = await Deserial("found", formatter/*, foundCl, foundList*/);
            foundList = foundCl.Count == 0 ? new List<string>() : foundCl.Keys.ToList<string>();
            //if (foundCl.Count == 0) { foundList = new List<string>(); }
            //else { foundList = foundCl.Keys.ToList<string>(); }


            savedCl = await Deserial("saved", formatter/*, savedCl, savedList*/);
            savedList = savedCl.Count == 0 ? new List<string>() : savedCl.Keys.ToList<string>();
            //if (savedCl.Count == 0) { savedList = new List<string>(); }
            //else { savedList = savedCl.Keys.ToList<string>(); }

            playCl = await Deserial("play", formatter/*, playCl, playList*/);
            playList = playCl.Count == 0 ? new List<string>() : playCl.Keys.ToList<string>();
            //if (playCl.Count == 0) { playList = new List<string>(); }
            //else { playList = playCl.Keys.ToList<string>(); }


            //Dictionary<string, Hj>

            //Deser("play", formatter, playCl, playList);
            //Deser("play", formatter, playCl, playList);

            //await JSRuntime2.InvokeVoidAsync("alert", "Произошла ошибка, смотрите описание!");
            #region MyRegion
            //if (await ls.ContainKeyAsync("found"))
            //{
            //    //var Result2 = Convert.FromBase64String(await ls.GetItemAsStringAsync("found"));

            //    using (MemoryStream stream = new MemoryStream(
            //        Convert.FromBase64String(await ls.GetItemAsStringAsync("found"))))
            //    {
            //        foundCl = formatter.Deserialize(stream) as Dictionary<string, Hj>;
            //    }

            //    foundList = foundCl.Keys.ToList<string>();

            //}
            //if (await ls.ContainKeyAsync("saved"))
            //{
            //    //var Result2 = Convert.FromBase64String(await ls.GetItemAsStringAsync("saved"));

            //    using (MemoryStream stream = new MemoryStream(
            //        Convert.FromBase64String(await ls.GetItemAsStringAsync("saved"))))
            //    {
            //        savedCl = formatter.Deserialize(stream) as Dictionary<string, Hj>;
            //    }

            //    savedList = savedCl.Keys.ToList<string>();

            //}
            //if (await ls.ContainKeyAsync("play"))
            //{
            //    //var Result2 = Convert.FromBase64String(await ls.GetItemAsStringAsync("play"));

            //    using (MemoryStream stream = new MemoryStream(Convert.FromBase64String(await ls.GetItemAsStringAsync("play"))))
            //    {
            //        playCl = formatter.Deserialize(stream) as Dictionary<string, Hj>;
            //    }

            //    playList = playCl.Keys.ToList<string>();

            //}
            #endregion

            //Opisanie = "resulto" ;
            //base.StateHasChanged();
            var resulto = await JSRuntime2.InvokeAsync<string>("loadClient", //"dw39shuhdw39");
GrinFc.Decrypt("b56mGFd6qA4itLpSAHafbrpslTS+ueSKBmC3vwLmRh4dA70L3So667jT7ToCv0io", GrinFc.GenerateAPassKey("Pass$#2++ss1.Ge4Key!1238")));
            //b56mGFd6qA4itLpSAHafbrpslTS+ueSKBmC3vwLmRh4dA70L3So667jT7ToCv0io
            //Opisanie = resulto;/*""*/
            //return;

            if (!StopBob(resulto))
            {
                Opisanie = resulto; return;
            }

            //if (resulto.Length != 0)// false
            //{
            //    if (resulto.Substring(0, 7) == "!!!true")// false
            //    {
            //        uriHelper.NavigateTo(uriHelper.BaseUri, forceLoad: true);
            //    }
            //    else if (resulto.Substring(0, 7) == "!!!fals")
            //    {
            //        Opisanie = resulto;
            //        return;
            //    }
            //}

            //var jsInProcess = (IJSInProcessRuntime)JSRuntime2;

            //if (!await ls.ContainKeyAsync("lastPlay"))
            //{
            resulto = await JSRuntime2.InvokeAsync<string>("mkYouTubeIframeAPIReady");
            //    }
            //else
            //    {
            //        //resulto = await JSRuntime2.InvokeAsync<string>("mkYouTubeIframeAPIReady");
            //        resulto = await JSRuntime2.InvokeAsync<string>("mkYouTubeIframeAPIReadyLast", await ls.GetItemAsync<string>("lastPlay"));
            //    }

            if (!StopBob(resulto))
            {
                Opisanie = resulto; return;
            }

            //if (resulto.Length != 0)// false
            //{
            //    if (resulto.Substring(0, 7) == "!!!true")// false
            //    {
            //        uriHelper.NavigateTo(uriHelper.BaseUri, forceLoad: true);
            //    }
            //    else if (resulto.Substring(0, 7) == "!!!fals")
            //    {
            //        Opisanie = resulto;
            //        return;
            //    }
            //}
            //Opisanie = resulto;
            await base.OnInitializedAsync();
            //bob = true;
        }
        catch (Exception e)
        {
            //await JSRuntime2.InvokeVoidAsync("alert", "Произошла ошибка, смотрите описание!"); // Alert

            //bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?"); // Confirm
            //string prompted = await JsRuntime.InvokeAsync<string>("prompt", "Take some input:"); // Prompt

            Opisanie = "Exception 1: " + e.Message;
        }
        //}
    }

    private async Task<Dictionary<string, Hj>>/*void*/ Deserial(string s, BinaryFormatter formatter/*, Dictionary<string, Hj> dict, List<string> lis*//**/)
    {
        if (/**/await ls.ContainKeyAsync(s))
        {

            using (MemoryStream stream = new MemoryStream(
                Convert.FromBase64String(await ls.GetItemAsStringAsync(s))))
            {
                /*dict =*/
                return formatter.Deserialize(stream) as Dictionary<string, Hj>;
            }

            //lis = dict.Keys.ToList<string>();

            //Opisanie = Opisanie + " \n " + s+ " \n " +string.Join("+", foundList) + " \n ";
        }
        return new Dictionary<string, Hj>();//
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //Opisanie = "rrresulto";
        //try
        //{
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            #region MyRegion
            //            var resulto = await JSRuntime2.InvokeAsync<string>("loadClient",
            //GrinFc.Decrypt("b56mGFd6qA4itLpSAHafbrpslTS+ueSKBmC3vwLmRh4dA70L3So667jT7ToCv0io", GrinFc.GenerateAPassKey("Pass$#2++ss1.Ge4Key!1238")));


            //            if (resulto.Length != 0)// false
            //            {
            //                if (resulto.Substring(0, 4) == "true")// false
            //                {
            //                    uriHelper.NavigateTo(uriHelper.BaseUri, forceLoad: true);
            //                }
            //                else if (resulto.Substring(0, 4) == "fals")
            //                {
            //                    Opisanie = resulto;
            //                    return;
            //                }
            //            }

            //            //var jsInProcess = (IJSInProcessRuntime)JSRuntime2;

            //            if (!await ls.ContainKeyAsync("lastPlay"))
            //            {
            //                resulto = await JSRuntime2.InvokeAsync<string>("mkYouTubeIframeAPIReady");
            //            }
            //            else
            //            {
            //                resulto = await JSRuntime2.InvokeAsync<string>("mkYouTubeIframeAPIReady");
            //                //resulto = jsInProcess.Invoke<string>("mkYouTubeIframeAPIReadyLast", await ls.GetItemAsync<string>("lastPlay"));
            //            }
            //            if (resulto.Length != 0)// false
            //            {
            //                if (resulto.Substring(0, 4) == "true")// false
            //                {
            //                    uriHelper.NavigateTo(uriHelper.BaseUri, forceLoad: true);
            //                }
            //                else if (resulto.Substring(0, 4) == "fals")
            //                {
            //                    Opisanie = resulto;
            //                    return;
            //                }
            //            }
            //            bob = true;

            //await JSRuntime2.InvokeVoidAsync("alert", "Произошла ошибка, смотрите описание!");
            /*//*///
                  //Opisanie = "esultorrr";/*string.IsNullOrWhiteSpace(resulto) ? "iii":"vvv"*/
            /*base.*/
            //StateHasChanged();
            //return;
            //throw new Exception("z");


            //await base.OnAfterRenderAsync(firstRender);
            #endregion
        }


        //}
        //catch (Exception e)
        //{
        //    await JSRuntime2.InvokeVoidAsync("alert", "Произошла ошибка, смотрите описание!");
        //    //await JSRuntime2.InvokeVoidAsync("alert", "Произошла ошибка, смотрите описание!"); // Alert
        //    //Opisanie = "Exception 2:" + e.Message;
        //}
    }

    string prevSearch;
    string nextPage;

    private async Task Find()
    {
        try
        {
            if (!bob) { Opisanie = "Ошибка активации."/*bob.ToString()*/; return; }
            //else{
            if (TextFind.Replace(" ", "").Length < 2) { return; }
            if (TextFind == "???") { return; }

            //foundList.Clear();
            //var ctt = foundCl;
            //foundCl.Clear();

            var foundCl1 = new Dictionary<string, Hj>();
            var foundCl2 = new Dictionary<string, Hj>();//

            string resulto = ""; /*"!!!false Запросов Не Отправлен."*/

            int bv = 0;

            if (prevSearch != TextFind)
            {
                prevSearch = TextFind; nextPage = "";

                resulto = await JSRuntime2.InvokeAsync<string>("videoSearch", TextFind);
                bv = 1;
            }
            else if (nextPage.Length != 0)
            {
                resulto = await JSRuntime2.InvokeAsync<string>("nextVideoS", nextPage);
                bv = 2;
            }

            //Opisanie ="===>" ; return;

            //if (!StopBob(resulto))
            //{
            Opisanie = /*bv.ToString() + "1===>" +*/ resulto; //return;
            //}


            if (resulto.Contains(@"""nextPageToken"":"""))
            {
                nextPage = resulto.Replace("  ", " ").Split(@"""nextPageToken"":""")[1]
            .Split(@""",""")[0];
            }
            else { nextPage = ""; }

            string[] ddd = resulto.Replace("  ", " ").Split(new string[] {
                                        @""",""id"":{""kind"":""youtube#video"",""videoId"":""" ,
                                        @"""},""snippet"":{""publishedAt"":""",
                                    @""",""title"":""",
                                    @""",""description"":""",
                                    @""",""thumbnails"":{""default"":"}, StringSplitOptions.None);


            if (ddd.Length == 1) { Opisanie = "Поиск не дал результатов."+ nextPage; return; }

            for (int ie = 0; ie < ddd.Length; ie = ie + 5)
            {
                foundCl1/*2*/.Add(ddd[ie + 3] + "<-rkt->" + ddd[ie + 1],
    new Hj() { videoId = ddd[ie + 1], description = ddd[ie + 4] });
                if (ie + 5 + 5 > ddd.Length) { break; }
            }

            //string[] lli = foundCl.Values.Select(x => x.videoId).ToArray();

            resulto = await JSRuntime2.InvokeAsync<string>("videoDetails",
                foundCl1/*2*/.Values.Select(x => x.videoId).ToArray().ToList<string>());

            if (!StopBob(resulto))
            {
                Opisanie = bv.ToString() + "2===>" + resulto; return;
            }

            string[] d2 = resulto.Split(new string[] {
                                        @""",""id"":""" ,
                                        @""",""contentDetails"":{""duration"":""",
                                        @""",""dimension"":"""}, StringSplitOptions.None);

            Dictionary<string, string> Cl = new Dictionary<string, string>();

            for (int ir = 0; ir < d2.Length; ir = ir + 3)
            {
                Cl.Add(d2[ir + 1], Math.Round(XmlConvert.ToTimeSpan(d2[ir + 2]).TotalMinutes).ToString());

                if (ir + 3 + 3 > d2.Length) { break; }
            }

            foreach (var item in foundCl1.Keys)
            {
                foundCl2.Add(
                Cl[foundCl1[item].videoId] + " " + item,
                foundCl1[item]);
            }

            #region MyRegion
            /*var*/
            //foundCl2 = new Dictionary<string, Hj>();

            //foreach (var item in foundCl2.Keys)
            //{
            //    foundCl2.Add(
            //    Cl[foundCl2[item].videoId] + " " + item,
            //    foundCl2[item]);
            //}
            //foundCl.Clear();
            //===============================
            //for (int i = 0; i < foundCl2.Count; i = i + 1)
            ////for (var i=0; in foundCl2.Keys)
            //{

            //    /*var kkk*/
            //    var cc = foundCl2.ElementAt(i).Key.Split(new string[] {
            //                            @"<-rkt->"}, StringSplitOptions.None);

            //    foundCl.Add(
            //        Cl[cc[0]] + " " + foundCl2.ElementAt(i).Key,
            //        foundCl2.ElementAt(i).Value);
            //    //        //--------------------
            //    //        foundCl2[Cl[cc[0]]]
            //    //        =new  foundCl2.ElementAt(i);/*.Key =""*/
            //    //        //-------------------------
            //    //        foundCl2.Add(
            //    //Cl[foundCl2[item].videoId] + " " + item,
            //    //foundCl2[item]);
            //} 
            #endregion
            //-------------------------------------------------

            #region MyRegion
            //if (prevSearch != TextFind)
            //{

            //    prevSearch = TextFind;

            //    /*var*/
            //    resulto = await JSRuntime2.InvokeAsync<string>("videoSearch", TextFind);

            //    if (!StopBob(resulto))
            //    {
            //        Opisanie = resulto; return;
            //    }

            //    #region MyRegion
            //    //if (resulto.Length != 0)// false
            //    //{
            //    //if (resulto.Substring(0, 7) == "!!!true")// false
            //    //{
            //    //    uriHelper.NavigateTo(uriHelper.BaseUri, forceLoad: true);
            //    //}
            //    //else if (resulto.Substring(0, 7) == "!!!fals")
            //    //{
            //    //    Opisanie = resulto;
            //    //    return;
            //    //}
            //    //}

            //    //if (5 > 1)
            //    //{
            //    //""nextPageToken"":"" "",""
            //    //string nextP;
            //    //if (resulto.Contains(@"""nextPageToken"":""")) {
            //    //    nextP = resulto.Replace("  ", " ").Split(@"""nextPageToken"":""")[1]
            //    //.Split(@""",""")[0];
            //    //}
            //    #endregion
            //    ///
            //    if (resulto.Contains(@"""nextPageToken"":"""))
            //    {
            //        nextPage = resulto.Replace("  ", " ").Split(@"""nextPageToken"":""")[1]
            //    .Split(@""",""")[0];
            //    }
            //    else { nextPage = ""; }
            //    ///
            //    string[] ddd = resulto.Replace("  ", " ").Split(new string[] {
            //                            @""",""id"":{""kind"":""youtube#video"",""videoId"":""" ,
            //                            @"""},""snippet"":{""publishedAt"":""",
            //                        @""",""title"":""",
            //                        @""",""description"":""",
            //                        @""",""thumbnails"":{""default"":"}, StringSplitOptions.None);


            //    if (ddd.Length == 1) { Opisanie = "Поиск не дал результатов."; return; }

            //    for (int ie = 0; ie < ddd.Length; ie = ie + 5)
            //    {
            //        foundCl.Add(ddd[ie + 3] + "<-rkt->" + ddd[ie + 1],
            //    new Hj() { videoId = ddd[ie + 1], description = ddd[ie + 4] });
            //        if (ie + 5 + 5 > ddd.Length) { break; }
            //    }

            //    //string[] lli = foundCl.Values.Select(x => x.videoId).ToArray();

            //    resulto = await JSRuntime2.InvokeAsync<string>("videoDetails",
            //        foundCl.Values.Select(x => x.videoId).ToArray().ToList<string>());

            //    if (!StopBob(resulto))
            //    {
            //        Opisanie = resulto; return;
            //    }


            //    string[] d2 = resulto.Split(new string[] {
            //                            @""",""id"":""" ,
            //                            @""",""contentDetails"":{""duration"":""",
            //                            @""",""dimension"":"""}, StringSplitOptions.None);

            //    Dictionary<string, string> Cl = new Dictionary<string, string>();

            //    for (int ir = 0; ir < d2.Length; ir = ir + 3)
            //    {
            //        Cl.Add(d2[ir + 1], Math.Round(XmlConvert.ToTimeSpan(d2[ir + 2]).TotalMinutes).ToString());

            //        if (ir + 3 + 3 > d2.Length) { break; }
            //    }

            //    /*var*/
            //    //foundCl2 = new Dictionary<string, Hj>();

            //    foreach (var item in foundCl.Keys)
            //    {
            //        foundCl2.Add(
            //        Cl[foundCl[item].videoId] + " " + item,
            //        foundCl[item]);
            //    }

            //    //foundCl = foundCl2;

            //    #region MyRegion
            //    //string nextP;
            //    //                if (resulto.Contains(@"""nextPageToken"":"""))
            //    //                {
            //    //                    /*nextP =*/
            //    //                    NextPage( resulto.Replace("  ", " ").Split(@"""nextPageToken"":""")[1]
            //    //.Split(@""",""")[0]);
            //    //                }
            //    //                else {
            //    #endregion

            //    //Serializ("found", foundCl/*, foundList*/); /*BinaryFormatter formatter,*//*, List<string> lis*/

            //    #region MyRegion
            //    //BinaryFormatter formatter = new BinaryFormatter();

            //    //string res;

            //    //using (MemoryStream stream1 = new MemoryStream())
            //    //{
            //    //    formatter.Serialize(stream1, foundCl);

            //    //    res = Convert.ToBase64String(stream1.GetBuffer(), 0, (int)stream1.Length);
            //    //}

            //    //await ls.SetItemAsync<string>("found", res);
            //    #endregion

            //    //foundList = foundCl.Keys.ToList<string>();
            //    //}
            //    //}
            //}
            //else if (nextPage.Length != 0)
            //{
            //    //videoSearchNext
            //    //prevSearch = TextFind;

            //    /*var*/
            //    resulto = await JSRuntime2.InvokeAsync<string>("videoSearchNext", nextPage);

            //    if (!StopBob(resulto))
            //    {
            //        Opisanie = resulto; return;
            //    }


            //    if (resulto.Contains(@"""nextPageToken"":"""))
            //    {
            //        nextPage = resulto.Replace("  ", " ").Split(@"""nextPageToken"":""")[1]
            //    .Split(@""",""")[0];
            //    }
            //    else { nextPage = ""; }
            //    ///
            //    string[] ddd = resulto.Replace("  ", " ").Split(new string[] {
            //                            @""",""id"":{""kind"":""youtube#video"",""videoId"":""" ,
            //                            @"""},""snippet"":{""publishedAt"":""",
            //                        @""",""title"":""",
            //                        @""",""description"":""",
            //                        @""",""thumbnails"":{""default"":"}, StringSplitOptions.None);


            //    if (ddd.Length == 1) { Opisanie = "Поиск не дал результатов."; return; }

            //    for (int ie = 0; ie < ddd.Length; ie = ie + 5)
            //    {
            //        foundCl.Add(ddd[ie + 3] + "<-rkt->" + ddd[ie + 1],
            //    new Hj() { videoId = ddd[ie + 1], description = ddd[ie + 4] });
            //        if (ie + 5 + 5 > ddd.Length) { break; }
            //    }

            //    //string[] lli = foundCl.Values.Select(x => x.videoId).ToArray();

            //    resulto = await JSRuntime2.InvokeAsync<string>("videoDetails",
            //        foundCl.Values.Select(x => x.videoId).ToArray().ToList<string>());

            //    if (!StopBob(resulto))
            //    {
            //        Opisanie = resulto; return;
            //    }

            //    string[] d2 = resulto.Split(new string[] {
            //                            @""",""id"":""" ,
            //                            @""",""contentDetails"":{""duration"":""",
            //                            @""",""dimension"":"""}, StringSplitOptions.None);

            //    Dictionary<string, string> Cl = new Dictionary<string, string>();

            //    for (int ir = 0; ir < d2.Length; ir = ir + 3)
            //    {
            //        Cl.Add(d2[ir + 1], Math.Round(XmlConvert.ToTimeSpan(d2[ir + 2]).TotalMinutes).ToString());

            //        if (ir + 3 + 3 > d2.Length) { break; }
            //    }

            //    /*var*/
            //    //foundCl2 = new Dictionary<string, Hj>();

            //    foreach (var item in foundCl.Keys)
            //    {
            //        foundCl2.Add(
            //        Cl[foundCl[item].videoId] + " " + item,
            //        foundCl[item]);
            //    }

            //    //foundCl = foundCl2;

            //    //Serializ("found", foundCl/*, foundList*/); /*BinaryFormatter formatter,*//*, List<string> lis*/

            //    //foundList = foundCl.Keys.ToList<string>();

            //}
            #endregion

            //foundCl.Clear();

            foundCl = foundCl2;

            Serializ("found", foundCl/*, foundList*/); /*BinaryFormatter formatter,*//*, List<string> lis*/

            foundList.Clear();
            foundList = foundCl.Keys.ToList<string>();

            //}
        }
        catch (Exception e)
        {
            Opisanie = "Exception 2 " + e.Message;
        }

    }

    //void NextPage(string s)
    //{

    //}

    private async void Serializ(string s, /*BinaryFormatter formatter,*/
        Dictionary<string, Hj> dict/*, List<string> lis*/)
    {
        #region MyRegion
        //BinaryFormatter formatter = new BinaryFormatter();

        //string res;

        //using (MemoryStream stream1 = new MemoryStream())
        //{
        //    formatter.Serialize(stream1, foundCl);

        //    res = Convert.ToBase64String(stream1.GetBuffer(), 0, (int)stream1.Length);
        //}

        //await ls.SetItemAsync<string>("found", res);

        //====
        #endregion

        BinaryFormatter formatter = new BinaryFormatter();

        string res;

        using (MemoryStream stream1 = new MemoryStream())
        {
            formatter.Serialize(stream1, dict);

            res = Convert.ToBase64String(stream1.GetBuffer(), 0, (int)stream1.Length);
        }

        await ls.SetItemAsync<string>(s, res);

        // lis = dict.Keys.ToList<string>();

        #region MyRegion
        //====

        //if (await ls.ContainKeyAsync(s))
        //{

        //    using (MemoryStream stream = new MemoryStream(
        //        Convert.FromBase64String(await ls.GetItemAsStringAsync(s))))
        //    {
        //        dict = formatter.Deserialize(stream) as Dictionary<string, Hj>;
        //    }

        //    lis = dict.Keys.ToList<string>();

        //}
        #endregion
    }

    private async Task Save()
    {
        try
        {
            var svd = (from s in foundCl
                       where s.Value.CheckedA == true
                       select s.Key).ToList<string>();


            foreach (var v in svd)
            {
                foundCl[v].CheckedA = false;
                if (!savedCl.Keys.Contains(v)) { savedCl.Add(v, foundCl[v].Get()); }
            }

            #region MyRegion
            //BinaryFormatter formatter = new BinaryFormatter();


            //string res;

            //using (MemoryStream stream1 = new MemoryStream())
            //{
            //    formatter.Serialize(stream1, savedCl);

            //    res = Convert.ToBase64String(stream1.GetBuffer(), 0, (int)stream1.Length);
            //}

            //await ls.SetItemAsync<string>("saved", res);

            //svd = savedCl.Keys.ToList<string>();
            #endregion

            var resulto = await JSRuntime2.InvokeAsync<string>("delCha", foundList, "fnd");

            if (!StopBob(resulto))
            {
                Opisanie = resulto; return;
            }

            //----------------
            Serializ("saved", savedCl/*, savedList*/);
            //----------------

            savedList = savedCl.Keys.ToList<string>();
            //-----------------

            //foreach (var v in svd)
            //{
            //    if (!savedList.Contains(v)) { savedList.Add(v); }
            //}
        }
        catch (Exception ex)
        {
            Opisanie = "Exception 3 " + ex.ToString();
        }
    }

    private async Task DeleteSavd()
    {

        try
        {
            var del = (from s in savedCl
                       where s.Value.CheckedA == true
                       select s.Key).ToList<string>();

            foreach (var v in del)
            {
                if (savedCl.Keys.Contains(v))
                {
                    savedCl.Remove(v);
                }
            }

            //--------------
            #region MyRegion
            //BinaryFormatter formatter = new BinaryFormatter();

            //string res;

            //using (MemoryStream stream1 = new MemoryStream())
            //{
            //    formatter.Serialize(stream1, savedCl);

            //    res = Convert.ToBase64String(stream1.GetBuffer(), 0, (int)stream1.Length);
            //}

            //await ls.SetItemAsync<string>("saved", res);
            #endregion

            //--------------

            var resulto = await JSRuntime2.InvokeAsync<string>("delCha", savedList, "svd");

            if (!StopBob(resulto))
            {
                Opisanie = resulto; return;
            }

            //
            Serializ("saved", savedCl/*, savedList*/);

            savedList.RemoveAll(vehicle => del.Contains(vehicle) == true);
        }
        catch (Exception ex)
        {

            Opisanie = "Exception 4 " + ex.ToString();
        }

    }

    private async Task AddPlay()
    {
        try
        {
            var ply = (from s in savedCl
                       where s.Value.CheckedA == true
                       select s.Key).ToList<string>();

            foreach (var v in ply)
            {
                savedCl[v].CheckedA = false;
                if (!playCl.Keys.Contains(v)) { playCl.Add(v, savedCl[v].Get()); }

            }

            //---------------
            #region MyRegion
            //BinaryFormatter formatter = new BinaryFormatter();

            //string res;

            //using (MemoryStream stream1 = new MemoryStream())
            //{
            //    formatter.Serialize(stream1, playCl);

            //    res = Convert.ToBase64String(stream1.GetBuffer(), 0, (int)stream1.Length);
            //}

            //await ls.SetItemAsync<string>("play", res);
            #endregion
            //--------------

            var resulto = await JSRuntime2.InvokeAsync<string>("delCha", savedList, "svd");

            if (!StopBob(resulto))
            {
                Opisanie = resulto; return;
            }//

            Serializ("play", playCl/*, savedList*/);

            //playList.AddRange(playCl.Keys.ToList<string>());
            playList = playCl.Keys.ToList<string>();

            //var resulto = await JSRuntime2.InvokeAsync<string>("delSvdCha", savedList);

            //ply = playCl.Keys.ToList<string>();
            //foreach (var v in ply)
            //{-
            //    if (!playList.Contains(v)) { playList.Add(v); }
            //}
        }
        catch (Exception ex)
        {

            Opisanie = "Exception 5 " + ex.ToString();
        }

    }

    private async Task DeletePlay()
    {

        try
        {
            var del = (from s in playCl
                       where s.Value.CheckedA == true
                       select s.Key).ToList<string>();

            foreach (var v in del)
            {
                if (playCl.Keys.Contains(v))
                {
                    playCl.Remove(v);
                }
            }

            //-----------------
            #region MyRegion
            //BinaryFormatter formatter = new BinaryFormatter();

            //string res;
            //using (MemoryStream stream1 = new MemoryStream())
            //{
            //    formatter.Serialize(stream1, playCl);

            //    res = Convert.ToBase64String(stream1.GetBuffer(), 0, (int)stream1.Length);
            //}

            //await ls.SetItemAsync<string>("play", res);
            #endregion
            //----------------

            var resulto = await JSRuntime2.InvokeAsync<string>("delCha", playList, "play");

            if (!StopBob(resulto))
            {
                Opisanie = resulto; return;
            }//

            Serializ("play", playCl);

            playList.RemoveAll(vehicle => del.Contains(vehicle) == true);

        }
        catch (Exception ex)
        {

            Opisanie = "Exception 6 " + ex.ToString();
        }

    }

    private async Task Start()
    {
        try
        {
            if (playCl.Count == 0) { return; }

            var dss = playCl.Values.Select(x => x.videoId).ToList<string>();

            await ls.SetItemAsync<string>("lastPlay", dss[0]);

            var resulto = await JSRuntime2.InvokeAsync<string>("playMany", dss);

            if (!StopBob(resulto))
            {
                Opisanie = resulto; return;
            }

        }
        catch (Exception ex)
        {
            Opisanie = "Exception 7 " + ex.ToString();
        }
    }

    private async Task playOne(string a, string b)
    {
        try
        {
            await ls.SetItemAsync<string>("lastPlay", b);

            Opisanie = a;

            var resulto = await JSRuntime2.InvokeAsync<string>("playOne", b);

            if (!StopBob(resulto))
            {
                Opisanie = resulto; return;
            }
        }
        catch (Exception ex)
        {

            Opisanie = "Exception 8 " + ex.ToString();
        }
    }

}

